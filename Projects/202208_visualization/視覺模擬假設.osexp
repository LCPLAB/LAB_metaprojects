---
API: 2.1
OpenSesame: 3.3.11
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set round_decimals 2
set height 768
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "C:\\冠文\\Downloads"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set canvas_backend psycho
set background black

define loop EXP
	set source table
	set repeat 0.5
	set order random
	set description "Repeatedly runs another item"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if "[count_EXP_gap]=1"
	setcycle 0 p_gap 0
	setcycle 0 e_gap 0
	setcycle 1 p_gap 1
	setcycle 1 e_gap 1
	run EXP_gap

define sketchpad EXP_Instruction
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=28 html=yes show_if=always text="練習結束，即將進入正式測驗<br/>請參與者全神專注，完成這次的測驗<br/><br/><br/><br/><br/><br/>按任意鍵進入正式實驗" x=0 y=90 z_index=0

define sketchpad EXP_end
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=36 html=yes show_if=always text="實驗結束<br/><br/>請記下你的實驗完成碼<br/>[identifier]<br/><br/>按任意鍵關閉網頁" x=0 y=-32 z_index=0

define sequence EXP_gap
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run presetup never
	run Prac_short "[p_gap]==0"
	run Prac_long "[p_gap]==1"
	run loop_setup always
	run EXP_Instruction always
	run EXP_short "[e_gap]==0"
	run EXP_long "[e_gap]==1"

define loop EXP_long
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 16
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 cue "red square"
	setcycle 0 target_color red
	setcycle 0 target_shape "■"
	setcycle 0 Trial_type dual
	setcycle 0 correct_response m
	setcycle 0 gap y
	setcycle 1 cue "red diamond"
	setcycle 1 target_color red
	setcycle 1 target_shape "◆"
	setcycle 1 Trial_type dual
	setcycle 1 correct_response m
	setcycle 1 gap y
	setcycle 2 cue "green square"
	setcycle 2 target_color green
	setcycle 2 target_shape "■"
	setcycle 2 Trial_type dual
	setcycle 2 correct_response m
	setcycle 2 gap y
	setcycle 3 cue "green diamond"
	setcycle 3 target_color green
	setcycle 3 target_shape "◆"
	setcycle 3 Trial_type dual
	setcycle 3 correct_response m
	setcycle 3 gap y
	setcycle 4 cue red
	setcycle 4 target_color red
	setcycle 4 target_shape "■"
	setcycle 4 Trial_type single
	setcycle 4 correct_response m
	setcycle 4 gap y
	setcycle 5 cue green
	setcycle 5 target_color green
	setcycle 5 target_shape "◆"
	setcycle 5 Trial_type single
	setcycle 5 correct_response m
	setcycle 5 gap y
	setcycle 6 cue square
	setcycle 6 target_color red
	setcycle 6 target_shape "■"
	setcycle 6 Trial_type single
	setcycle 6 correct_response m
	setcycle 6 gap y
	setcycle 7 cue diamond
	setcycle 7 target_color green
	setcycle 7 target_shape "◆"
	setcycle 7 Trial_type single
	setcycle 7 correct_response m
	setcycle 7 gap y
	setcycle 8 cue "red square"
	setcycle 8 target_color green
	setcycle 8 target_shape "■"
	setcycle 8 Trial_type dual
	setcycle 8 correct_response z
	setcycle 8 gap y
	setcycle 9 cue "red diamond"
	setcycle 9 target_color green
	setcycle 9 target_shape "■"
	setcycle 9 Trial_type dual
	setcycle 9 correct_response z
	setcycle 9 gap y
	setcycle 10 cue "green square"
	setcycle 10 target_color red
	setcycle 10 target_shape "◆"
	setcycle 10 Trial_type dual
	setcycle 10 correct_response z
	setcycle 10 gap y
	setcycle 11 cue "green diamond"
	setcycle 11 target_color red
	setcycle 11 target_shape "■"
	setcycle 11 Trial_type dual
	setcycle 11 correct_response z
	setcycle 11 gap y
	setcycle 12 cue green
	setcycle 12 target_color red
	setcycle 12 target_shape "■"
	setcycle 12 Trial_type single
	setcycle 12 correct_response z
	setcycle 12 gap y
	setcycle 13 cue red
	setcycle 13 target_color green
	setcycle 13 target_shape "◆"
	setcycle 13 Trial_type single
	setcycle 13 correct_response z
	setcycle 13 gap y
	setcycle 14 cue diamond
	setcycle 14 target_color red
	setcycle 14 target_shape "■"
	setcycle 14 Trial_type single
	setcycle 14 correct_response z
	setcycle 14 gap y
	setcycle 15 cue square
	setcycle 15 target_color green
	setcycle 15 target_shape "◆"
	setcycle 15 Trial_type single
	setcycle 15 correct_response z
	setcycle 15 gap y
	run EXP_seq

define loop EXP_prac
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 cue "red square"
	setcycle 0 target_color red
	setcycle 0 target_shape "■"
	setcycle 0 Trial_type dual
	setcycle 0 correct_response m
	setcycle 0 gap n
	setcycle 1 cue green
	setcycle 1 target_color green
	setcycle 1 target_shape "■"
	setcycle 1 Trial_type single
	setcycle 1 correct_response m
	setcycle 1 gap n
	run EXP_seq_prac

define sequence EXP_seq
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run fixation always
	run cue always
	run interval always
	run target always
	run response_ans always
	run decision_response_correct "[correct]=1"
	run decision_response_wrong "[correct]=0"
	run new_inline_javascript never
	run new_logger always

define sequence EXP_seq_prac
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run fixation_1 always
	run cue_1 always
	run interval_1 always
	run target_1 always
	run response_ans_1 always
	run decision_response_correct_1 "[correct]=1"
	run decision_response_wrong_1 "[correct]=0"
	run new_inline_javascript_1 always
	run new_logger_1 always

define loop EXP_short
	set source table
	set repeat 2
	set order random
	set description "Repeatedly runs another item"
	set cycles 16
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 cue "red square"
	setcycle 0 target_color red
	setcycle 0 target_shape "■"
	setcycle 0 Trial_type dual
	setcycle 0 correct_response m
	setcycle 0 gap n
	setcycle 1 cue "red diamond"
	setcycle 1 target_color red
	setcycle 1 target_shape "◆"
	setcycle 1 Trial_type dual
	setcycle 1 correct_response m
	setcycle 1 gap n
	setcycle 2 cue "green square"
	setcycle 2 target_color green
	setcycle 2 target_shape "■"
	setcycle 2 Trial_type dual
	setcycle 2 correct_response m
	setcycle 2 gap n
	setcycle 3 cue "green diamond"
	setcycle 3 target_color green
	setcycle 3 target_shape "◆"
	setcycle 3 Trial_type dual
	setcycle 3 correct_response m
	setcycle 3 gap n
	setcycle 4 cue red
	setcycle 4 target_color red
	setcycle 4 target_shape "■"
	setcycle 4 Trial_type single
	setcycle 4 correct_response m
	setcycle 4 gap n
	setcycle 5 cue green
	setcycle 5 target_color green
	setcycle 5 target_shape "◆"
	setcycle 5 Trial_type single
	setcycle 5 correct_response m
	setcycle 5 gap n
	setcycle 6 cue square
	setcycle 6 target_color red
	setcycle 6 target_shape "■"
	setcycle 6 Trial_type single
	setcycle 6 correct_response m
	setcycle 6 gap n
	setcycle 7 cue diamond
	setcycle 7 target_color green
	setcycle 7 target_shape "◆"
	setcycle 7 Trial_type single
	setcycle 7 correct_response m
	setcycle 7 gap n
	setcycle 8 cue "red square"
	setcycle 8 target_color green
	setcycle 8 target_shape "■"
	setcycle 8 Trial_type dual
	setcycle 8 correct_response z
	setcycle 8 gap n
	setcycle 9 cue "red diamond"
	setcycle 9 target_color green
	setcycle 9 target_shape "■"
	setcycle 9 Trial_type dual
	setcycle 9 correct_response z
	setcycle 9 gap n
	setcycle 10 cue "green square"
	setcycle 10 target_color red
	setcycle 10 target_shape "◆"
	setcycle 10 Trial_type dual
	setcycle 10 correct_response z
	setcycle 10 gap n
	setcycle 11 cue "green diamond"
	setcycle 11 target_color red
	setcycle 11 target_shape "■"
	setcycle 11 Trial_type dual
	setcycle 11 correct_response z
	setcycle 11 gap n
	setcycle 12 cue green
	setcycle 12 target_color red
	setcycle 12 target_shape "■"
	setcycle 12 Trial_type single
	setcycle 12 correct_response z
	setcycle 12 gap n
	setcycle 13 cue red
	setcycle 13 target_color green
	setcycle 13 target_shape "◆"
	setcycle 13 Trial_type single
	setcycle 13 correct_response z
	setcycle 13 gap n
	setcycle 14 cue diamond
	setcycle 14 target_color red
	setcycle 14 target_shape "■"
	setcycle 14 Trial_type single
	setcycle 14 correct_response z
	setcycle 14 gap n
	setcycle 15 cue square
	setcycle 15 target_color green
	setcycle 15 target_shape "◆"
	setcycle 15 Trial_type single
	setcycle 15 correct_response z
	setcycle 15 gap n
	run EXP_seq

define loop Prac_long
	set source table
	set repeat 0.5
	set order random
	set description "Repeatedly runs another item"
	set cycles 16
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 cue "red square"
	setcycle 0 target_color red
	setcycle 0 target_shape "■"
	setcycle 0 Trial_type dual
	setcycle 0 correct_response m
	setcycle 0 gap y
	setcycle 1 cue "red diamond"
	setcycle 1 target_color red
	setcycle 1 target_shape "◆"
	setcycle 1 Trial_type dual
	setcycle 1 correct_response m
	setcycle 1 gap y
	setcycle 2 cue "green square"
	setcycle 2 target_color green
	setcycle 2 target_shape "■"
	setcycle 2 Trial_type dual
	setcycle 2 correct_response m
	setcycle 2 gap y
	setcycle 3 cue "green diamond"
	setcycle 3 target_color green
	setcycle 3 target_shape "◆"
	setcycle 3 Trial_type dual
	setcycle 3 correct_response m
	setcycle 3 gap y
	setcycle 4 cue red
	setcycle 4 target_color red
	setcycle 4 target_shape "■"
	setcycle 4 Trial_type single
	setcycle 4 correct_response m
	setcycle 4 gap y
	setcycle 5 cue green
	setcycle 5 target_color green
	setcycle 5 target_shape "◆"
	setcycle 5 Trial_type single
	setcycle 5 correct_response m
	setcycle 5 gap y
	setcycle 6 cue square
	setcycle 6 target_color red
	setcycle 6 target_shape "■"
	setcycle 6 Trial_type single
	setcycle 6 correct_response m
	setcycle 6 gap y
	setcycle 7 cue diamond
	setcycle 7 target_color green
	setcycle 7 target_shape "◆"
	setcycle 7 Trial_type single
	setcycle 7 correct_response m
	setcycle 7 gap y
	setcycle 8 cue "red square"
	setcycle 8 target_color green
	setcycle 8 target_shape "■"
	setcycle 8 Trial_type dual
	setcycle 8 correct_response z
	setcycle 8 gap y
	setcycle 9 cue "red diamond"
	setcycle 9 target_color green
	setcycle 9 target_shape "■"
	setcycle 9 Trial_type dual
	setcycle 9 correct_response z
	setcycle 9 gap y
	setcycle 10 cue "green square"
	setcycle 10 target_color red
	setcycle 10 target_shape "◆"
	setcycle 10 Trial_type dual
	setcycle 10 correct_response z
	setcycle 10 gap y
	setcycle 11 cue "green diamond"
	setcycle 11 target_color red
	setcycle 11 target_shape "■"
	setcycle 11 Trial_type dual
	setcycle 11 correct_response z
	setcycle 11 gap y
	setcycle 12 cue green
	setcycle 12 target_color red
	setcycle 12 target_shape "■"
	setcycle 12 Trial_type single
	setcycle 12 correct_response z
	setcycle 12 gap y
	setcycle 13 cue red
	setcycle 13 target_color green
	setcycle 13 target_shape "◆"
	setcycle 13 Trial_type single
	setcycle 13 correct_response z
	setcycle 13 gap y
	setcycle 14 cue diamond
	setcycle 14 target_color red
	setcycle 14 target_shape "■"
	setcycle 14 Trial_type single
	setcycle 14 correct_response z
	setcycle 14 gap y
	setcycle 15 cue square
	setcycle 15 target_color green
	setcycle 15 target_shape "◆"
	setcycle 15 Trial_type single
	setcycle 15 correct_response z
	setcycle 15 gap y
	run EXP_seq

define loop Prac_short
	set source table
	set repeat 0.5
	set order random
	set description "Repeatedly runs another item"
	set cycles 16
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 cue "red square"
	setcycle 0 target_color red
	setcycle 0 target_shape "■"
	setcycle 0 Trial_type dual
	setcycle 0 correct_response m
	setcycle 0 gap n
	setcycle 1 cue "red diamond"
	setcycle 1 target_color red
	setcycle 1 target_shape "◆"
	setcycle 1 Trial_type dual
	setcycle 1 correct_response m
	setcycle 1 gap n
	setcycle 2 cue "green square"
	setcycle 2 target_color green
	setcycle 2 target_shape "■"
	setcycle 2 Trial_type dual
	setcycle 2 correct_response m
	setcycle 2 gap n
	setcycle 3 cue "green diamond"
	setcycle 3 target_color green
	setcycle 3 target_shape "◆"
	setcycle 3 Trial_type dual
	setcycle 3 correct_response m
	setcycle 3 gap n
	setcycle 4 cue red
	setcycle 4 target_color red
	setcycle 4 target_shape "■"
	setcycle 4 Trial_type single
	setcycle 4 correct_response m
	setcycle 4 gap n
	setcycle 5 cue green
	setcycle 5 target_color green
	setcycle 5 target_shape "◆"
	setcycle 5 Trial_type single
	setcycle 5 correct_response m
	setcycle 5 gap n
	setcycle 6 cue square
	setcycle 6 target_color red
	setcycle 6 target_shape "■"
	setcycle 6 Trial_type single
	setcycle 6 correct_response m
	setcycle 6 gap n
	setcycle 7 cue diamond
	setcycle 7 target_color green
	setcycle 7 target_shape "◆"
	setcycle 7 Trial_type single
	setcycle 7 correct_response m
	setcycle 7 gap n
	setcycle 8 cue "red square"
	setcycle 8 target_color green
	setcycle 8 target_shape "■"
	setcycle 8 Trial_type dual
	setcycle 8 correct_response z
	setcycle 8 gap n
	setcycle 9 cue "red diamond"
	setcycle 9 target_color green
	setcycle 9 target_shape "■"
	setcycle 9 Trial_type dual
	setcycle 9 correct_response z
	setcycle 9 gap n
	setcycle 10 cue "green square"
	setcycle 10 target_color red
	setcycle 10 target_shape "◆"
	setcycle 10 Trial_type dual
	setcycle 10 correct_response z
	setcycle 10 gap n
	setcycle 11 cue "green diamond"
	setcycle 11 target_color red
	setcycle 11 target_shape "■"
	setcycle 11 Trial_type dual
	setcycle 11 correct_response z
	setcycle 11 gap n
	setcycle 12 cue green
	setcycle 12 target_color red
	setcycle 12 target_shape "■"
	setcycle 12 Trial_type single
	setcycle 12 correct_response z
	setcycle 12 gap n
	setcycle 13 cue red
	setcycle 13 target_color green
	setcycle 13 target_shape "◆"
	setcycle 13 Trial_type single
	setcycle 13 correct_response z
	setcycle 13 gap n
	setcycle 14 cue diamond
	setcycle 14 target_color red
	setcycle 14 target_shape "■"
	setcycle 14 Trial_type single
	setcycle 14 correct_response z
	setcycle 14 gap n
	setcycle 15 cue square
	setcycle 15 target_color green
	setcycle 15 target_shape "◆"
	setcycle 15 Trial_type single
	setcycle 15 correct_response z
	setcycle 15 gap n
	run EXP_seq

define sketchpad cue
	set duration 1000
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="[cue]" x=0 y=0 z_index=0

define sketchpad cue_1
	set duration 1000
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="[cue]" x=0 y=0 z_index=0

define sketchpad decision_response_correct
	set duration 500
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=yes font_family=mono font_italic=no font_size=48 html=yes show_if=always text="正確!" x=0 y=0 z_index=0

define sketchpad decision_response_correct_1
	set duration 500
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=48 html=yes show_if=always text="正確!" x=0 y=0 z_index=0

define sketchpad decision_response_wrong
	set duration 500
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=yes font_family=mono font_italic=no font_size=48 html=yes show_if=always text="答錯了!" x=0 y=0 z_index=0

define sketchpad decision_response_wrong_1
	set duration 500
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=48 html=yes show_if=always text="答錯了!" x=0 y=0 z_index=0

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run welcome_01 always
	run welcome_02 always
	run initilization always
	run presetup never
	run EXP always
	run EXP_end always

define sketchpad fixation
	set duration 500
	set description "Displays stimuli"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define sketchpad fixation_1
	set duration 500
	set description "Displays stimuli"
	draw fixdot color=white show_if=always style=default x=0 y=0 z_index=0

define inline_javascript initilization
	set description "Executes JavaScript code"
	set _run ""
	___prepare__
	// Generate the identifier for the participant
	vars.identifier = Math.random().toString(36).substr(2, 9);
	// Local version will not show identifier on "PP_End".
	
	// getRndInteger(min, max) returns a random number between min and max (both included):
	function getRndInteger(min, max) {
	  return Math.floor(Math.random() * (max - min + 1) ) + min;
	}
	
	vars.List = getRndInteger(1,4);
	__end__

define sketchpad interval
	set duration 2000
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if="[gap]=y" text="[cue]" x=0 y=0 z_index=0

define sketchpad interval_1
	set duration 2000
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if="[gap]=y" text="[cue]" x=0 y=0 z_index=0

define notepad loop_setup
	__note__
	- 指導語要提示如何進行反應。
	- 每次實驗只執行 short或long
	- target_shape的square與diamond長寬要一致
	- sequence最後要有logger
	- 結束時要給「完成代碼」；生成的JS程式碼與最後呈現畫面參考上學期示範範腳本
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_javascript new_inline_javascript
	set description "Executes JavaScript code"
	___run__
	// getRndInteger(min, max) returns a random number between min and max (both included):
	function getRndInteger(min, max) {
	  return Math.floor(Math.random() * (max - min + 1) ) + min;
	}
	
	// Prepare memory check after 5th trial
	if(vars.list_length > 5){
	
	// Locate the probe to be checked
	vars.anchor = getRndInteger(0,5);
	
	// Use the first anchor
	vars.recterm = vars.term_list[vars.anchor];
	
	// Set up correct_response
	if( vars.anchor < 3 ) {
			vars.correct_response = 'l';
	}
	else{
			vars.correct_response = 'a';
	}
	
	}
	
	// Store response time to target
	//vars.response_time_target = vars.response_time
	
	// Store answerto target
	vars.correct_response_target = vars.correct_response
	
	// Store correctness to target
	//vars.correct_target = vars.correct
	
	// Mark the memory check
	if( (vars.trial_seq == vars.check_0) | (vars.trial_seq == vars.check_1) | (vars.trial_seq == vars.check_2) | (vars.trial_seq == vars.check_3) | (vars.trial_seq == vars.check_4) | (vars.trial_seq == vars.check_5) | (vars.trial_seq == vars.check_6) | (vars.trial_seq == vars.check_7) | (vars.trial_seq == vars.check_8) | (vars.trial_seq == vars.check_9) | (vars.trial_seq == vars.check_10) | (vars.trial_seq == vars.check_11) | (vars.trial_seq == vars.check_12) | (vars.trial_seq == vars.check_13) | (vars.trial_seq == vars.check_14) | (vars.trial_seq == vars.check_15) | (vars.trial_seq == vars.check_16) | (vars.trial_seq == vars.check_17) | (vars.trial_seq == vars.check_18) | (vars.trial_seq == vars.check_19) | (vars.trial_seq == vars.check_20)| (vars.trial_seq == vars.check_21) | (vars.trial_seq == vars.check_22) | (vars.trial_seq == vars.check_23) ){
	        vars.memory = "y";
	} 
	else{
	        vars.memory = 'n';
	}
	__end__
	set _prepare ""

define inline_javascript new_inline_javascript_1
	set description "Executes JavaScript code"
	___run__
	// getRndInteger(min, max) returns a random number between min and max (both included):
	function getRndInteger(min, max) {
	  return Math.floor(Math.random() * (max - min + 1) ) + min;
	}
	
	// Prepare memory check after 5th trial
	if(vars.list_length > 5){
	
	// Locate the probe to be checked
	vars.anchor = getRndInteger(0,5);
	
	// Use the first anchor
	vars.recterm = vars.term_list[vars.anchor];
	
	// Set up correct_response
	if( vars.anchor < 3 ) {
			vars.correct_response = 'l';
	}
	else{
			vars.correct_response = 'a';
	}
	
	}
	
	// Store response time to target
	//vars.response_time_target = vars.response_time
	
	// Store answerto target
	vars.correct_response_target = vars.correct_response
	
	// Store correctness to target
	//vars.correct_target = vars.correct
	
	// Mark the memory check
	if( (vars.trial_seq == vars.check_0) | (vars.trial_seq == vars.check_1) | (vars.trial_seq == vars.check_2) | (vars.trial_seq == vars.check_3) | (vars.trial_seq == vars.check_4) | (vars.trial_seq == vars.check_5) | (vars.trial_seq == vars.check_6) | (vars.trial_seq == vars.check_7) | (vars.trial_seq == vars.check_8) | (vars.trial_seq == vars.check_9) | (vars.trial_seq == vars.check_10) | (vars.trial_seq == vars.check_11) | (vars.trial_seq == vars.check_12) | (vars.trial_seq == vars.check_13) | (vars.trial_seq == vars.check_14) | (vars.trial_seq == vars.check_15) | (vars.trial_seq == vars.check_16) | (vars.trial_seq == vars.check_17) | (vars.trial_seq == vars.check_18) | (vars.trial_seq == vars.check_19) | (vars.trial_seq == vars.check_20)| (vars.trial_seq == vars.check_21) | (vars.trial_seq == vars.check_22) | (vars.trial_seq == vars.check_23) ){
	        vars.memory = "y";
	} 
	else{
	        vars.memory = 'n';
	}
	__end__
	set _prepare ""

define logger new_logger
	set description "Logs experimental data"
	set auto_log no
	log correct
	log correct_response
	log response_time
	log response
	log Task
	log Topic
	log identifier
	log correct_target
	log correct_response_target
	log response_time_target
	log response_time_decision_response
	log correct_decision_response
	log response_time_Check_response
	log correct_Check_response
	log memory
	log anchor
	log term_list
	log trial_seq

define logger new_logger_1
	set description "Logs experimental data"
	set auto_log no

define inline_javascript presetup
	set description "Executes JavaScript code"
	___run__
	//getRndInteger(min, max) returns a random number between min and max (both included):
	function getRndInteger(min, max) {
	  return Math.floor(Math.random() * (max - min + 1) ) + min;
	}
	
	// Call empty list for memory check
	vars.term_list = [];
	
	// Call counters for trial sequence
	vars.trial_seq = 0;
	
	// Call memory slot for probe list length
	let list_length; 
	
	// Call memory slot for response time to target
	let response_time_target
	
	// Call memory slot for correctness to target
	let correct_target
	
	// Call target for memory check
	vars.recterm = [];
	
	// Generate the index of memory check
	// save each randomized sequence into each variable
	vars.check_0 = getRndInteger(7,8);
	vars.check_1 = getRndInteger(10,11);
	vars.check_2 = getRndInteger(14,15);
	vars.check_3 = getRndInteger(18,19);
	vars.check_4 = getRndInteger(22,23);
	vars.check_5 = getRndInteger(26,27);
	vars.check_6 = getRndInteger(30,31);
	vars.check_7 = getRndInteger(34,35);
	vars.check_8 = getRndInteger(38,39);
	vars.check_9 = getRndInteger(42,43);
	vars.check_10 = getRndInteger(46,47);
	vars.check_11 = getRndInteger(50,51);
	vars.check_12 = getRndInteger(54,55);
	vars.check_13 = getRndInteger(58,59);
	vars.check_14 = getRndInteger(62,63);
	vars.check_15 = getRndInteger(66,67);
	vars.check_16 = getRndInteger(70,71);
	vars.check_17 = getRndInteger(74,75);
	vars.check_18 = getRndInteger(78,79);
	vars.check_19 = getRndInteger(82,83);
	vars.check_20 = getRndInteger(84,85);
	vars.check_21 = getRndInteger(88,89);
	vars.check_22 = getRndInteger(92,93);
	vars.check_23 = getRndInteger(95,96);
	__end__
	set _prepare ""

define keyboard_response response_ans
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set allowed_responses "z;m"

define keyboard_response response_ans_1
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set allowed_responses "z;m"

define sketchpad target
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color="[target_color]" font_bold=no font_family=mono font_italic=no font_size=120 html=yes show_if=always text="[target_shape]" x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="z:不符合" x=-256 y=224 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="m:符合" x=256 y=224 z_index=0

define sketchpad target_1
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color="[target_color]" font_bold=no font_family=mono font_italic=no font_size=120 html=yes show_if=always text="[target_shape]" x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="z:不符合" x=-256 y=224 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=24 html=yes show_if=always text="m:符合" x=256 y=224 z_index=0

define sketchpad task_break_1
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=36 html=yes show_if=always text="休息一下<br /><br />按任意鍵繼續" x=0 y=0 z_index=0

define sketchpad welcome_01
	set start_response_interval no
	set reset_variables no
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=serif font_italic=no font_size=32 html=yes show_if=always text="歡迎參加圖像視覺化測驗" x=0 y=-288 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=18 html=yes show_if=always text="這是一個測試圖像視覺化的實驗，實驗過程中你會先看到一個字詞，會呈現一到三秒鐘。字詞消失後你需要判斷接著出現的圖像，圖像的特徵是否符合字詞的提示。這次實驗只有四種圖像，如以下例子裡的字詞與圖像。" x=-480 y=-224 z_index=0
	draw textline center=0 color=red font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="■" x=64 y=-128 z_index=0
	draw textline center=0 color=green font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="◆" x=64 y=-32 z_index=0
	draw textline center=0 color=green font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="■" x=64 y=64 z_index=0
	draw textline center=0 color=red font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="◆" x=64 y=160 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="red square" x=-288 y=-128 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text="green diamond" x=-288 y=-32 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text=green x=-288 y=64 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=30 html=yes show_if=always text=red x=-288 y=160 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=18 html=yes show_if=always text="你看到的圖像如果至少有一個特徵符合字詞提示，請按<b>m</b>。" x=-400 y=288 z_index=0
	draw textline center=0 color=white font_bold=no font_family=serif font_italic=no font_size=18 html=yes show_if=always text="如果圖像沒有特徵符合字詞提示，請按<b>z</b>。" x=-400 y=320 z_index=0
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="按任意鍵繼續" x=256 y=320 z_index=0

define sketchpad welcome_02
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=28 html=yes show_if=always text="為了幫助各位參與者熟悉操作，接下來會請參與者進行練習<br/>共有8題練習題，練習結束後會提醒您正式測驗即將開始<br/>按任意鍵即可進入正式測驗<br/><br/><br/>正式實驗結束後會出現感謝參與的提示訊息，並記下您的實驗完成碼<br/>回報給實驗施測人員，依提示按鍵即可關閉測驗視窗。<br/><br/><br/><br/><br/>按任意鍵進入練習" x=0 y=60 z_index=0

